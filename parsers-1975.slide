Writing parsers like it is 1975
A practical introduction to Lex and Yacc
14 Jun 2019

Jiayu Yi

* Contents

- Why write a parser?
- What are Lex and Yacc?
- Building a simple calculator
- Final notes

* Why write a parser?

* There comes a point in the life of every programmer when they find themselves in need of a parser.

The novice programmer will ask, "what is a parser?"

The intermediate programmer will say, "that's easy, I'll write a regular expression."

The master programmer will say, "stand back, I know lex and yacc."

- From [[https://bodil.lol/parser-combinators/][https://bodil.lol/parser-combinators/]]

* You never know when it will come in useful

.image regular_expressions_smaller.png
.caption [[https://xkcd.com/208/][https://xkcd.com/208/]]

* What are Lex and Yacc?

* Lex

- Performs lexical analysis
- Splits input into tokens based on rules
- Performs actions when matching tokens

* Lex example

Input:

	logging {
		category lame-servers { null; };
		category cname { null; };
	};
	
	zone "." {
		type hint;
		file "/etc/bind/db.root";
	};

Output:

	WORD OBRACE 
	WORD FILENAME OBRACE WORD SEMICOLON EBRACE SEMICOLON 
	WORD WORD OBRACE WORD SEMICOLON EBRACE SEMICOLON 
	EBRACE SEMICOLON 

	WORD QUOTE FILENAME QUOTE OBRACE 
	WORD WORD SEMICOLON 
	WORD QUOTE FILENAME QUOTE SEMICOLON 
	EBRACE SEMICOLON 

* Yacc

- Consumes sequences of tokens
- Performs actions based on grammar rules

* Grammar example

Rules:

	exprs: exprs expr
	expr: literal | addition
	literal: NUMBER
	addition: NUMBER PLUS NUMBER

Input:

	123
	2 + 2
	-10

Tokens:

	NUMBER             # matches literal
	NUMBER PLUS NUMBER # matches addition
	MINUS NUMBER       # invalid

* Getting started

* Code samples

.link https://github.com/yi-jiayu/parsers-1975

* Lex file structure

	%{
	C declarations
	%}

	%%
	Rules
	%%

	Additional C code

- The second %% is optional

* Example 1

- `example1.l`:

	%{
	#include <stdio.h>
	%}

	%%
	stop    printf("Stop command received\n");
	start   printf("Start command received\n");
	%%

- To compile:

	lex example1.l
	cc lex.yy.c -o example1 -ll

* Example 1

- Output:

	$ ./example1
	start
	Start command received

	stop
	Stop command received

	pause
	pause

- Matching "start" or "stop" triggers the corresponding action
- Unmatched input is passed through

* Example 2

- `example2.l`:

	%{
	#include <stdio.h>
	%}

	%%
	[0-9]+  printf("NUMBER ");
	\+      printf("PLUS ");
	-       printf("MINUS ");
	\*      printf("TIMES ");
	\/      printf("DIVIDE ");
	[ \t]   ; // match and ignore whitespace
	%%

- Regular expressions can be used to match tokens

* Example 2

- Output:

	$ ./example2
	123
	NUMBER 
	11 + 23 - 5 / 10 * 5
	NUMBER PLUS NUMBER MINUS NUMBER DIVIDE NUMBER TIMES NUMBER 
	C++ **5** /100/
	CPLUS PLUS TIMES TIMES NUMBER TIMES TIMES DIVIDE NUMBER DIVIDE

- Lex doesn't care about invalid input

* Example 3

- Let's do some parsing!
- `example3.l`:

	%{
	#include <stdio.h>
	#include "y.tab.h"
	%}

	%%
	[0-9]+  return NUMBER;
	\+      return PLUS;
	-       return MINUS;
	\*      return TIMES;
	\/      return DIVIDE;
	\n      return EOL;
	[ \t]+  ; // match and ignore whitespace
	%%

- Return tokens instead of printing
- Tokens are defined in `y.tab.h`, which will be generated by Yacc

* Yacc file structure

	%{
	C declarations
	%}

	Yacc declarations

	%%
	Grammar rules
	%%

	Additional C code

- The next few slides will be referring to `example3.y`

* C declarations

.code -numbers example3.y 1,16

- `yyerror` is called by Yacc on errors
- `yywrap` is used to read from multiple files. Returning 1 indicates the end of input
- `yyparse` is the entry point for the generated parser

* Yacc declarations:

.code -numbers example3.y 18

- This is where we define the tokens that Lex will return

* Grammar rules

.code -numbers example3.y 20,28

- The first nonterminal symbol is where parsing will start

* Grammar rules continued

.code -numbers example3.y 30,35

* Grammar rules continued

.code -numbers example3.y 37,49

* Grammar rules continued

.code -numbers example3.y 51,63

* Example 3

- Compilation:

.code Makefile 10,12

- Output:

	$ ./example3
	123
	Got a number!
	2 + 2
	Adding two numbers!
	10*4
	Multiplying two numbers!
	1/0
	Dividing a number by another!
	-1
	error: syntax error

- Does not actually recognise the value of the tokens yet
- Syntax error when rules are not matched

* References

[[https://en.wikipedia.org/wiki/Lex_(software)][https://en.wikipedia.org/wiki/Lex_(software)]]
[[https://en.wikipedia.org/wiki/Yacc][https://en.wikipedia.org/wiki/Yacc]]
[[https://ieeexplore.ieee.org/document/8227293][https://ieeexplore.ieee.org/document/8227293]]
[[https://bodil.lol/parser-combinators/][https://bodil.lol/parser-combinators/]]
[[https://ds9a.nl/lex-yacc/cvs/output/lexyacc.html][https://ds9a.nl/lex-yacc/cvs/output/lexyacc.html]]
[[https://www2.cs.arizona.edu/classes/cs453/fall14/DOCS/tutorial-large.pdf][https://www2.cs.arizona.edu/classes/cs453/fall14/DOCS/tutorial-large.pdf]]
[[http://cse.iitkgp.ac.in/~bivasm/notes/LexAndYaccTutorial.pdf][http://cse.iitkgp.ac.in/~bivasm/notes/LexAndYaccTutorial.pdf]]
[[http://www.cse.scu.edu/~mwang2/compiler/TutorialLexYacc.pdf][http://www.cse.scu.edu/~mwang2/compiler/TutorialLexYacc.pdf]]
[[https://cs.wmich.edu/~yang/teach/cs485/yacc.pdf][https://cs.wmich.edu/~yang/teach/cs485/yacc.pdf]]
[[http://www-h.eng.cam.ac.uk/help/tpl/languages/flexbison/][http://www-h.eng.cam.ac.uk/help/tpl/languages/flexbison/]]
[[https://www.gnu.org/software/bison/manual/html_node/index.html#SEC_Contents][https://www.gnu.org/software/bison/manual/html_node/index.html#SEC_Contents]]
[[http://dinosaur.compilertools.net/lex/index.html][http://dinosaur.compilertools.net/lex/index.html]]
